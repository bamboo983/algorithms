See the Assessment Guide for information on how to interpret this report.

Assessment Summary

Compilation:  PASSED
Style:        PASSED
Findbugs:     Potential bugs found.
API:          PASSED

Correctness:  37/42 tests passed
Memory:       11/11 tests passed
Timing:       0/17 tests passed

Aggregate score: 67.26% [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]

Assessment Details

The following files were submitted:
----------------------------------
total 20K
-rw-r--r-- 1 4.6K Nov 28 03:53 Board.java
-rw-r--r-- 1 4.6K Nov 28 03:53 Solver.java
-rw-r--r-- 1 2.8K Nov 28 03:53 studentSubmission.zip


********************************************************************************
*          COMPILING                                                           *
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

================================================================

% javac Solver.java
*-----------------------------------------------------------

================================================================



% checkstyle *.java
*-----------------------------------------------------------

================================================================


% findbugs *.class
*-----------------------------------------------------------
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'priority()' is never called.  At Solver.java:[line 122]
M P URF_UNREAD_FIELD UrF: The instance (or static) variable 'moves' is never read. Consider removing it from the class.  At Solver.java:[line 17]
Warnings generated: 2

================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


******************************************************************************
*  TESTING CORRECTNESS
******************************************************************************

Testing methods in Board
*-----------------------------------------------------------
Running 22 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: Test hamming() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==> passed

Test 1b: Test hamming() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
  *  127-by-127
==> passed

Test 2a: Test manhattan() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
     -  student   manhattan() = 9
     -  reference manhattan() = 0
        10
         1  2  3  4  5  6  7  8  9 10
        11 12 13 14 15 16 17 18 19 20
        21 22 23 24 25 26 27 28 29 30
        31 32 33 34 35 36 37 38 39 40
        41 42 43 44 45 46 47 48 49 50
        51 52 53 54 55 56 57 58 59 60
        61 62 63 64 65 66 67 68 69 70
        71 72 73 74 75 76 77 78 79 80
        81 82 83 84 85 86 87 88 89 90
        91 92 93 94 95 96 97 98 99  0

  *  puzzle07.txt
     -  student   manhattan() = 5
     -  reference manhattan() = 7
        3
         1  2  3
         0  7  6
         5  4  8

  *  puzzle17.txt
     -  student   manhattan() = 5
     -  reference manhattan() = 13
        3
         5  1  8
         2  7  3
         4  0  6

  *  puzzle27.txt
     -  student   manhattan() = 11
     -  reference manhattan() = 17
        3
         5  8  7
         1  4  6
         3  0  2

  *  puzzle2x2-unsolvable1.txt
     -  student   manhattan() = 2
     -  reference manhattan() = 3
        2
         1  0
         2  3

==> FAILED

Test 2b: Test manhattan() with random N-by-N boards
  *  2-by-2
     -  student   manhattan() = 2
     -  reference manhattan() = 3
        2
         3  1
         0  2

     -  Failed on trial 1 of 1000

  *  3-by-3
     -  student   manhattan() = 14
     -  reference manhattan() = 16
        3
         8  5  0
         7  2  4
         6  1  3

     -  Failed on trial 1 of 1000

  *  4-by-4
     -  student   manhattan() = 27
     -  reference manhattan() = 34
        4
         7 13  8 14
         5  0  2  6
         1 10 12  9
        11 15  3  4

     -  Failed on trial 1 of 1000

  *  5-by-5
     -  student   manhattan() = 64
     -  reference manhattan() = 78
        5
         2 18 10  3 24
        15 22  4 16  1
        20 14  6 11 13
        19 17  5 23 21
         0  7  8  9 12

     -  Failed on trial 1 of 1000

  *  9-by-9
     -  student   manhattan() = 348
     -  reference manhattan() = 478
        9
        54 45 34 77  1 65 24 31 47
        11 71 58  3 23 62 32 14 40
        43 75 55 52 63 33 37 39 22
        29 53 25 30 12 60 78 79 21
        64 41 72 49 68 36 66 44 16
        51  8 67 48 57 15  9 73 69
        38  6 27 28 35 46 26 18 17
        80 59  4 56 42  2 19 50 76
         0 10  5 13 61 70 20  7 74

     -  Failed on trial 1 of 1000

  *  10-by-10
     -  student   manhattan() = 410
     -  reference manhattan() = 613
        10
        23 44 32 14 29 63 47 83 46 99
        13 34 43 60 65 51  8 35 20  2
        17 53 27 69 55  4 54  9 70 15
        48 66 24 96  0 25 45 72 31 93
         7 91 22 67 38 57 37 19 95 98
        62 89 50 41 78 33 71 86 92 40
        61  1 77  5 10 79 39 85 90 94
        36 87 75 82 12 59 11 56 26 76
        80 84 16 42 73 49 28 97  6 81
        88 64 58 74 68 18 30 52  3 21

     -  Failed on trial 1 of 1000

  *  127-by-127
     -  student   manhattan() = 955936
     -  reference manhattan() = 1372828
     -  Failed on trial 1 of 10

==> FAILED

Test 3: Test dimension() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
==> passed

Test 4a: Test toString() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==> passed

Test 4b: Test toString() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
  *  127-by-127
==> passed

Test 5a: Test neighbors() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==> passed

Test 5b: Test neighbors() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
  *  127-by-127
==> passed

Test 6a: Test neighbors() of neigbors() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==> passed

Test 6b: Test neighbors() of neighbors() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==> passed

Test 7a: Test twin() with file inputs
  *  puzzle04.txt
     -  twin() doesn't return a twin
        3
         0  3  1
         2  5  4
         8  6  7

  *  puzzle00.txt
     -  twin() doesn't return a twin
        10
         2  3  4  5  6  7  8  9 10  1
        12 13 14 15 16 17 18 19 20 11
        22 23 24 25 26 27 28 29 30 21
        32 33 34 35 36 37 38 39 40 31
        42 43 44 45 46 47 48 49 50 41
        52 53 54 55 56 57 58 59 60 51
        62 63 64 65 66 67 68 69 70 61
        72 73 74 75 76 77 78 79 80 71
        82 83 84 85 86 87 88 89 90 81
        92 93 94 95 96 97 98 99 91  0

  *  puzzle06.txt
     -  twin() doesn't return a twin
        4
         0  2  3  1
         6  7  4  5
        10 11  8  9
        14 15 12 13

  *  puzzle09.txt
     -  twin() doesn't return a twin
        4
         2  0  4  3
        10  6  8  1
         9  7 12  5
        14 11 15 13

  *  puzzle23.txt
     -  twin() doesn't return a twin
        3
         5  0  4
         3  8  2
         1  6  7

  *  puzzle2x2-unsolvable1.txt
==> FAILED

Test 7b: Test twin() with random N-by-N boards
  *  2-by-2
  *  3-by-3
     -  twin() doesn't return a twin
        3
         3  8  1
         7  4  5
         0  2  6

     -  Failed on trial 1 of 1000

  *  4-by-4
     -  twin() doesn't return a twin
        4
         9 12 13  4
        11  3 14  0
         7  2 10  5
         1  6  8 15

     -  Failed on trial 1 of 1000

  *  5-by-5
     -  twin() doesn't return a twin
        5
         1  3 14  4 13
        20 17  9 22  5
         6 11 12 16 15
         7 10 23  0 21
        24 18  2  8 19

     -  Failed on trial 1 of 1000

  *  9-by-9
     -  twin() doesn't return a twin
        9
        21 56 15 43 63 72 26 70 11
        50 46 65 32 38 29 18 48  9
        17 69  1 54 62 33 51 47 20
        73 68 34 75 30  6 78 80 23
        16  0 64  8 58 74 77 49  5
        55  3 35 42 44 60 39 37  2
        79 53 67 24 52 45 25 66  4
        22 31 10 27 14 59 28  7 12
        13 19 61 71 76 41 57 36 40

     -  Failed on trial 1 of 100

  *  10-by-10
     -  twin() doesn't return a twin
        10
        70 85 90 30 42 64 18 24 56 87
        20  8 60 53  6 44  5 84 58 97
        16 27 74 46  7 12 93 25 54 78
        37 86 72 80 43 75 99 98 28 13
        79  9 15 63 47 29 33 32 83 55
        52  1 96 41 68 51 38 89 88 71
         2 81 62 19 21 66 91 31 73 59
        22 14 76 11 23 35 48  3 95  4
        39 65 61 45 82 10 40  0 67 77
        57 94 34 17 49 92 36 69 26 50

     -  Failed on trial 1 of 10

==> FAILED

Test 8a: Test isGoal() on file inputs
  *  puzzle00.txt
  *  puzzle04.txt
  *  puzzle16.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-00.txt
  *  puzzle4x4-00.txt
==> passed

Test 8b: Test isGoal() on N-by-N goal boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  6-by-6
  *  100-by-100
==> passed

Test 9: Check whether two Board objects can be created at the same time
  *   random 3-by-3 and 3-by-3 boards
  *   random 4-by-4 and 4-by-4 boards
  *   random 2-by-2 and 2-by-2 boards
  *   random 3-by-3 and 4-by-4 boards
  *   random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: Check equals()
  *  reflexive
  *  symmetric
  *  checks that individual entries of array are equal
  *  argument is object of type String
  *  argument is object of type Object
  *  argument is null
  *  argument is Board of different dimension
==> passed

Test 10b: Test equals() on M-by-M vs. N-by-N goal boards
  *  M = 2, N = 2
  *  M = 3, N = 3
  *  M = 4, N = 4
  *  M = 2, N = 5
  *  M = 5, N = 2
==> passed

Test 11: Check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: Check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  *  puzzle10.txt
  *  puzzle20.txt
  *  puzzle30.txt
  *  2-by-2
  *  3-by-3
  *  4-by-4
==> passed

Test 13: Call hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: Call manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
     -  student   manhattan() = 11
     -  reference manhattan() = 17
        3
         5  8  7
         1  4  6
         3  0  2

  * 1th neighbor of puzzle27.txt
     -  student   manhattan() = 10
     -  reference manhattan() = 16
        3
         5  8  7
         1  4  6
         3  2  0

  * 2th neighbor of puzzle27.txt
     -  student   manhattan() = 13
     -  reference manhattan() = 19
        3
         5  8  7
         1  6  0
         3  4  2

  * 13th neighbor of puzzle27.txt
     -  student   manhattan() = 10
     -  reference manhattan() = 16
        3
         0  5  7
         1  8  6
         3  4  2

  * 13th neighbor of puzzle00.txt
     -  student   manhattan() = 10
     -  reference manhattan() = 5
        10
         1  2  3  4  5  6  7  8  9 10
        11 12 13 14 15 16 17 18 19 20
        21 22 23 24 25 26 27 28 29 30
        31 32 33 34 35 36 37 38 39 40
        41 42 43 44 45 46 47 48 49 50
        51 52 53 54 55 56 57 58 59 60
        61 62 63 64 65 66 67 68 69 70
        71 72 73 74 75 76 77 78 80 89
        81 82 83 84 85 86 87 88 79  0
        91 92 93 94 95 96 97 98 99 90

  * 13th neighbor of puzzle2x2-unsolvable1.txt
     -  student   manhattan() = 1
     -  reference manhattan() = 4
        2
         0  3
         1  2

==> FAILED


Total: 17/22 tests passed!


================================================================

******************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
******************************************************************************

Testing methods in Solver
*-----------------------------------------------------------
Running 20 total tests.

Test 1: Call moves() with file inputs
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle09.txt
  *  puzzle10.txt
  *  puzzle11.txt
  *  puzzle12.txt
  *  puzzle13.txt
==> passed

Test 2: Call solution() with file inputs
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle10.txt
  *  puzzle15.txt
==> passed

Test 3: Create two Solver objects at the same time
  *  puzzle04.txt and puzzle04.txt
  *  puzzle00.txt and puzzle04.txt
  *  puzzle04.txt and puzzle00.txt
==> passed

Test 4a: Call isSolvable() with file inputs
  *  puzzle01.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle17.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==> passed

Test 4b: Call isSolvable() on random n-by-n boards
  *  100 random 2-by-2 boards
==> passed

Test 5: Call moves() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==> passed

Test 6: Call solution() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==> passed

Test 7a: Check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  *  puzzle3x3-00.txt
  *  puzzle3x3-01.txt
  *  puzzle3x3-05.txt
  *  puzzle3x3-10.txt
  *  random 2-by-2 solvable boards
==> passed

Test 7b: Check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
  *  random 2-by-2 unsolvable boards
==> passed

Test 8: Call moves() with more file inputs
  *  puzzle14.txt
  *  puzzle15.txt
  *  puzzle16.txt
  *  puzzle17.txt
  *  puzzle18.txt
  *  puzzle19.txt
  *  puzzle20.txt
  *  puzzle21.txt
  *  puzzle22.txt
  *  puzzle23.txt
  *  puzzle24.txt
  *  puzzle25.txt
  *  puzzle26.txt
  *  puzzle27.txt
  *  puzzle28.txt
  *  puzzle29.txt
  *  puzzle30.txt
  *  puzzle31.txt
==> passed

Test 9: Check whether equals() method in Board is called
        with an argument of the wrong type
  *  puzzle00.txt
  *  puzzle05.txt
  *  puzzle10.txt
  *  puzzle15.txt
==> passed

Test 10: Check that constructor throws exception if board is null
==> passed

Test 11: Check for fragile dependence on toString()
  *  puzzle00.txt
  *  puzzle04.txt
  *  puzzle08.txt
  *  puzzle12.txt
==> passed

Test 12a: Call moves() with 2-by-2 file inputs
  *  puzzle2x2-00.txt
  *  puzzle2x2-01.txt
  *  puzzle2x2-02.txt
  *  puzzle2x2-03.txt
  *  puzzle2x2-04.txt
  *  puzzle2x2-05.txt
  *  puzzle2x2-06.txt
==> passed

Test 12b: Call solution() with 2-by-2 file inputs
  *  puzzle2x2-00.txt
  *  puzzle2x2-01.txt
  *  puzzle2x2-02.txt
  *  puzzle2x2-03.txt
  *  puzzle2x2-04.txt
  *  puzzle2x2-05.txt
  *  puzzle2x2-06.txt
==> passed

Test 13a: Call moves() with 3-by-3 file inputs
  *  puzzle3x3-00.txt
  *  puzzle3x3-01.txt
  *  puzzle3x3-02.txt
  *  puzzle3x3-03.txt
  *  puzzle3x3-04.txt
  *  puzzle3x3-05.txt
  *  puzzle3x3-06.txt
  *  puzzle3x3-07.txt
  *  puzzle3x3-08.txt
  *  puzzle3x3-09.txt
  *  puzzle3x3-10.txt
  *  puzzle3x3-11.txt
  *  puzzle3x3-12.txt
  *  puzzle3x3-13.txt
  *  puzzle3x3-14.txt
  *  puzzle3x3-15.txt
  *  puzzle3x3-16.txt
  *  puzzle3x3-17.txt
  *  puzzle3x3-18.txt
  *  puzzle3x3-19.txt
  *  puzzle3x3-20.txt
  *  puzzle3x3-21.txt
  *  puzzle3x3-22.txt
  *  puzzle3x3-23.txt
  *  puzzle3x3-24.txt
  *  puzzle3x3-25.txt
  *  puzzle3x3-26.txt
  *  puzzle3x3-27.txt
  *  puzzle3x3-28.txt
  *  puzzle3x3-29.txt
  *  puzzle3x3-30.txt
==> passed

Test 13b: Call solution() with 3-by-3 file inputs
  *  puzzle3x3-00.txt
  *  puzzle3x3-01.txt
  *  puzzle3x3-02.txt
  *  puzzle3x3-03.txt
  *  puzzle3x3-04.txt
  *  puzzle3x3-05.txt
  *  puzzle3x3-06.txt
  *  puzzle3x3-07.txt
  *  puzzle3x3-08.txt
  *  puzzle3x3-09.txt
  *  puzzle3x3-10.txt
  *  puzzle3x3-11.txt
  *  puzzle3x3-12.txt
  *  puzzle3x3-13.txt
  *  puzzle3x3-14.txt
  *  puzzle3x3-15.txt
  *  puzzle3x3-16.txt
  *  puzzle3x3-17.txt
  *  puzzle3x3-18.txt
  *  puzzle3x3-19.txt
  *  puzzle3x3-20.txt
  *  puzzle3x3-21.txt
  *  puzzle3x3-22.txt
  *  puzzle3x3-23.txt
  *  puzzle3x3-24.txt
  *  puzzle3x3-25.txt
  *  puzzle3x3-26.txt
  *  puzzle3x3-27.txt
  *  puzzle3x3-28.txt
  *  puzzle3x3-29.txt
  *  puzzle3x3-30.txt
==> passed

Test 14a: Call moves() with 4-by-4 file inputs
  *  puzzle4x4-00.txt
  *  puzzle4x4-01.txt
  *  puzzle4x4-02.txt
  *  puzzle4x4-03.txt
  *  puzzle4x4-04.txt
  *  puzzle4x4-05.txt
  *  puzzle4x4-06.txt
  *  puzzle4x4-07.txt
  *  puzzle4x4-08.txt
  *  puzzle4x4-09.txt
  *  puzzle4x4-10.txt
  *  puzzle4x4-11.txt
  *  puzzle4x4-12.txt
  *  puzzle4x4-13.txt
  *  puzzle4x4-14.txt
  *  puzzle4x4-15.txt
  *  puzzle4x4-16.txt
  *  puzzle4x4-17.txt
  *  puzzle4x4-18.txt
  *  puzzle4x4-19.txt
  *  puzzle4x4-20.txt
  *  puzzle4x4-21.txt
  *  puzzle4x4-22.txt
  *  puzzle4x4-23.txt
  *  puzzle4x4-24.txt
  *  puzzle4x4-25.txt
  *  puzzle4x4-26.txt
  *  puzzle4x4-27.txt
  *  puzzle4x4-28.txt
  *  puzzle4x4-29.txt
  *  puzzle4x4-30.txt
==> passed

Test 14b: Call solution() with 4-by-4 file inputs
  *  puzzle4x4-00.txt
  *  puzzle4x4-01.txt
  *  puzzle4x4-02.txt
  *  puzzle4x4-03.txt
  *  puzzle4x4-04.txt
  *  puzzle4x4-05.txt
  *  puzzle4x4-06.txt
  *  puzzle4x4-07.txt
  *  puzzle4x4-08.txt
  *  puzzle4x4-09.txt
  *  puzzle4x4-10.txt
  *  puzzle4x4-11.txt
  *  puzzle4x4-12.txt
  *  puzzle4x4-13.txt
  *  puzzle4x4-14.txt
  *  puzzle4x4-15.txt
  *  puzzle4x4-16.txt
  *  puzzle4x4-17.txt
  *  puzzle4x4-18.txt
  *  puzzle4x4-19.txt
  *  puzzle4x4-20.txt
  *  puzzle4x4-21.txt
  *  puzzle4x4-22.txt
  *  puzzle4x4-23.txt
  *  puzzle4x4-24.txt
  *  puzzle4x4-25.txt
  *  puzzle4x4-26.txt
  *  puzzle4x4-27.txt
  *  puzzle4x4-28.txt
  *  puzzle4x4-29.txt
  *  puzzle4x4-30.txt
==> passed

Test 15: Call moves() with random solvable n-by-n boards
  *  100 random 2-by-2 boards
  *  200 random 3-by-3 boards that are <= 20 moves from goal
  *  200 random 4-by-4 boards that are <= 20 moves from goal
  *  200 random 5-by-5 boards that are <= 20 moves from goal
==> passed


Total: 20/20 tests passed!


================================================================

******************************************************************************
*  MEMORY
******************************************************************************

Computing memory of Board
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of an n-by-n board

              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     4           248                  240
=> passed     8           568                  560
=> passed    12          1016                 1008
=> passed    16          1592                 1584
=> passed    20          2296                 2288
=> passed    36          6392                 6384
=> passed    72         23096                23088
=> passed   120         61496                61488
==> 8/8 tests passed

Total: 8/8 tests passed!

Student   memory = 4.00 n^2 + 32.00 n + 56.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



Computing memory of Solver
*-----------------------------------------------------------
Running 3 total tests.

Test 1: memory with puzzle20.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 216 bytes
  - memory of reference Solver = 4896 bytes
  - student / reference        = 0.04
==> passed

Test 2: memory with puzzle25.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 216 bytes
  - memory of reference Solver = 6056 bytes
  - student / reference        = 0.04
==> passed

Test 3: memory with puzzle30.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 6544 bytes
  - memory of reference Solver = 7216 bytes
  - student / reference        = 0.91
==> passed


Total: 3/3 tests passed!

================================================================



******************************************************************************
*  TIMING
******************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 17 total tests.

Timing tests use your implementation of Board.java and Solver.java.
Maximum time allowed per puzzle is 10 seconds.

               filename   N    seconds    insert()            delMin()         max PQ size
---------------------------------------------------------------------------------------------
=> FAILED  puzzle20.txt   3     0.10      42902   (8.2x)      25260   (8.1x)      17644   (8.3x)
=> passed  puzzle21.txt   3     0.03      17179               10100                7081
=> FAILED  puzzle22.txt   3     0.06      47561   (3.5x)      28006   (3.5x)      19557   (3.5x)
=> passed  puzzle23.txt   3     0.02      16453                9658                6797
=> passed  puzzle24.txt   3     0.03      25358               14958               10402
=> FAILED  puzzle25.txt   3     0.14     112199   (1.9x)      66048   (1.9x)      46153   (1.9x)
=> FAILED  puzzle26.txt   3     0.20     249830   (4.9x)     146520   (4.9x)     103312   (5.0x)
=> FAILED  puzzle27.txt   3     0.10     129759   (1.5x)      75770   (1.4x)      53991   (1.6x)
=> FAILED  puzzle28.txt   3     0.08     106972               62832               44142   (1.1x)
=> FAILED  puzzle29.txt   3     0.26     229719   (2.8x)     136100   (2.7x)      93621   (2.9x)
=> FAILED  puzzle30.txt   3     2.14    2309548  (10.9x)    1351708  (10.5x)     957842  (11.4x)
=> FAILED  puzzle31.txt   3     0.29     373306   (1.7x)     220352   (1.6x)     152956   (1.7x)

Total: 0/17 tests passed: Could not complete tests in allotted time, which results in a reported score of 0.
================================================================
