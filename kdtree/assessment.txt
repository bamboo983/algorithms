See the Assessment Guide for information on how to interpret this report.

Assessment Summary

Compilation:  PASSED
Checkstyle:   PASSED
Findbugs:     PASSED
API:          PASSED

Correctness:  27/27 tests passed
Memory:       8/8 tests passed
Timing:       42/42 tests passed

Aggregate score: 100.00% [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]

Assessment Details

The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 4.9K Dec  9 09:00 KdTree.java
-rw-r--r-- 1 1.9K Dec  9 09:00 PointSET.java
-rw-r--r-- 1 2.2K Dec  9 09:00 studentSubmission.zip


********************************************************************************
*  COMPILING                                                                   *
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

================================================================


% findbugs *.class
*-----------------------------------------------------------

================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


******************************************************************************
*  TESTING CORRECTNESS
******************************************************************************

Testing methods in PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: Test size() by inserting n random points
        (size may be less than n because of duplicates)
  *  100000 random points in a 100000-by-100000 grid
  *  100000 random points in a 10000-by-10000 grid
  *  100000 random points in a 1000-by-1000 grid
  *  100000 random points in a 100-by-100 grid
  *  100000 random points in a 10-by-10 grid
==> passed

Test 2: Test isEmpty() by checking for n = 0, 1, and 2 points
  *  zero points
  *  one point
  *  two points
==> passed

Test 3: Insert n random points and check contains() for random query points
  *  100000 random points in a 100000-by-100000 grid
  *  100000 random points in a 10000-by-10000 grid
  *  100000 random points in a 1000-by-1000 grid
  *  100000 random points in a 100-by-100 grid
  *  100000 random points in a 10-by-10 grid
==> passed

Test 4: Insert n random points and check nearest() for random query points
  *  1000 random points in a 100000-by-100000 grid
  *  1000 random points in a 10000-by-10000 grid
  *  1000 random points in a 1000-by-1000 grid
  *  1000 random points in a 100-by-100 grid
  *  1000 random points in a 10-by-10 grid
==> passed

Test 5: Insert n random points and check range() for random query rectangles
  *  1000 random rectangles and points in a 100000-by-100000 grid
  *  1000 random rectangles and points in a 10000-by-10000 grid
  *  1000 random rectangles and points in a 1000-by-1000 grid
  *  1000 random rectangles and points in a 100-by-100 grid
  *  1000 random rectangles and points in a 10-by-10 grid
==> passed

Test 6: Intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  *  10000 calls with random points in a 10000-by-10000 grid
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  *  10000 calls with random points in a 1000-by-1000 grid
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  *  10000 calls with random points in a 100-by-100 grid
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  *  10000 calls with random points in a 10-by-10 grid
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  *  10000 calls with random points in a 1-by-1 grid
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
==> passed

Test 7: Intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  *  1000 calls with random points in a 1000-by-1000 grid
     and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  *  1000 calls with random points in a 1000-by-1000 grid
     and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  *  1000 calls with random points in a 1000-by-1000 grid
     and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  *  1000 calls with random points in a 1000-by-1000 grid
     and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
  *  1000 calls with random points in a 1000-by-1000 grid
     and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==> passed

Test 8: Test whether two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================

Testing methods in KdTree
*-----------------------------------------------------------
In the tests below, we consider three classes of points and rectangles.

  *  Non-degenerate points: no two points (or rectangles) share either an
                            x-coordinate or a y-coordinate

  *  Distinct points:       no two points (or rectangles) share both an
                            x-coordinate and a y-coordinate

  *  General points:        no restrictions on the x-coordinates or y-coordinates
                            of the points (or rectangles)

A point in an GRID-by-GRID grid means that it is of the form (i/GRID, j/GRID),
where i and j are integers between 0 and GRID

Running 19 total tests.

Test 1a: Insert n non-degenerate points and check size() after each insertion
  *  50000 random non-degenerate points in a 100000-by-100000 grid
  *  5000 random non-degenerate points in a 10000-by-10000 grid
  *  500 random non-degenerate points in a 1000-by-1000 grid
  *  50 random non-degenerate points in a 100-by-100 grid
  *  10 random non-degenerate points in a 10-by-10 grid
  *  1 random non-degenerate points in a 1-by-1 grid
==> passed

Test 1b: Insert n distinct points and check size() after each insertion
  *  100000 random distinct points in a 100000-by-100000 grid
  *  100000 random distinct points in a 10000-by-10000 grid
  *  100000 random distinct points in a 1000-by-1000 grid
  *  10000 random distinct points in a 100-by-100 grid
  *  100 random distinct points in a 10-by-10 grid
  *  1 random distinct points in a 1-by-1 grid
==> passed

Test 1c: Insert n general points and check size() after each insertion
  *  100000 random general points in a 100000-by-100000 grid
  *  100000 random general points in a 10000-by-10000 grid
  *  100000 random general points in a 1000-by-1000 grid
  *  100000 random general points in a 100-by-100 grid
  *  100000 random general points in a 10-by-10 grid
  *  10 random general points in a 1-by-1 grid
==> passed

Test 2: Test size() and isEmpty() for n = 0, 1, and 2 points
  *  zero points
  *  one point
  *  two points
==> passed

Test 3a: Insert n non-degenerate points and call contains() with random query points
  *  50000 random non-degenerate points in a 100000-by-100000 grid
  *  5000 random non-degenerate points in a 10000-by-10000 grid
  *  500 random non-degenerate points in a 1000-by-1000 grid
  *  50 random non-degenerate points in a 100-by-100 grid
  *  5 random non-degenerate points in a 10-by-10 grid
  *  1 random non-degenerate points in a 1-by-1 grid
==> passed

Test 3b: Insert n distinct points and call contains() with random query points
  *  100000 random distinct points in a 100000-by-100000 grid
  *  100000 random distinct points in a 10000-by-10000 grid
  *  100000 random distinct points in a 1000-by-1000 grid
  *  10000 random distinct points in a 100-by-100 grid
  *  100 random distinct points in a 10-by-10 grid
  *  1 random distinct points in a 1-by-1 grid
==> passed

Test 3c: Insert n general points and call contains() with random query points
  *  10000 random general points in a 1000-by-1000 grid
  *  10000 random general points in a 100-by-100 grid
  *  10000 random general points in a 10-by-10 grid
  *  10000 random general points in a 1-by-1 grid
==> passed

Test 4: Test whether two KdTree objects can be created at the same time
==> passed

Test 5a: Insert n non-degenerate points and call range() for n random query rectangles
  *  5000 random non-degenerate points and rectangles in a 100000-by-100000 grid
  *  5000 random non-degenerate points and rectangles in a 10000-by-10000 grid
  *  500 random non-degenerate points and rectangles in a 1000-by-1000 grid
  *  50 random non-degenerate points and rectangles in a 100-by-100 grid
  *  5 random non-degenerate points and rectangles in a 10-by-10 grid
==> passed

Test 5b: Insert n distinct points and call range() for n random query rectangles
  *  5000 random distinct points and rectangles in a 100000-by-100000 grid
  *  5000 random distinct points and rectangles in a 10000-by-10000 grid
  *  1000 random distinct points and rectangles in a 1000-by-1000 grid
  *  1000 random distinct points and rectangles in a 100-by-100 grid
  *  5 random distinct points and rectangles in a 10-by-10 grid
==> passed

Test 5c: Insert n general points and call range() for n random query rectangles
  *  5000 random general points and rectangles in a 10000-by-10000 grid
  *  5000 random general points and rectangles in a 1000-by-1000 grid
  *  5000 random general points and rectangles in a 100-by-100 grid
  *  5000 random general points and rectangles in a 10-by-10 grid
  *  5000 random general points and rectangles in a 1-by-1 grid
==> passed

Test 5d: Insert n points and call range() for tiny rectangles enclosing each point.
  *  4000 tiny rectangles and 4000 points in a 100000-by-100000 grid
  *  4000 tiny rectangles and 4000 points in a 10000-by-10000 grid
  *  4000 tiny rectangles and 4000 points in a 1000-by-1000 grid
  *  4000 tiny rectangles and 4000 points in a 100-by-100 grid
  *  4000 tiny rectangles and 4000 points in a 10-by-10 grid
==> passed

Test 6a: Insert n non-degenerate points and call nearest() with random query points
  *  50000 random non-degenerate points in a 100000-by-100000 grid
  *  5000 random non-degenerate points in a 10000-by-10000 grid
  *  500 random non-degenerate points in a 1000-by-1000 grid
  *  50 random non-degenerate points in a 100-by-100 grid
  *  5 random non-degenerate points in a 10-by-10 grid
==> passed

Test 6b: Insert n distinct points and call nearest() with random query points
  *  50000 random distinct points in a 100000-by-100000 grid
  *  10000 random distinct points in a 10000-by-10000 grid
  *  10000 random distinct points in a 1000-by-1000 grid
  *  5000 random distinct points in a 100-by-100 grid
  *  50 random distinct points in a 10-by-10 grid
==> passed

Test 6c: Insert n general points and call nearest() with random query points
  *  10000 random general points in a 1000-by-1000 grid
  *  10000 random general points in a 100-by-100 grid
  *  10000 random general points in a 10-by-10 grid
==> passed

Test 7a: Intermixed sequence of calls to insert(), isEmpty(), size(),
         contains(), range(), and nearest() with probabilities
         [p1, p2, p3, p4, p5, p6], respectively
  *  20000 calls with non-degenerate points in a 100000-by-100000 grid
     and probabilities [0.3, 0.05, 0.05, 0.1, 0.2, 0.2]
  *  20000 calls with non-degenerate points in a 10000-by-10000 grid
     and probabilities [0.3, 0.05, 0.05, 0.1, 0.2, 0.2]
  *  20000 calls with non-degenerate points in a 1000-by-1000 grid
     and probabilities [0.3, 0.05, 0.05, 0.1, 0.2, 0.2]
  *  20000 calls with non-degenerate points in a 100-by-100 grid
     and probabilities [0.3, 0.05, 0.05, 0.1, 0.2, 0.2]
  *  20000 calls with non-degenerate points in a 10-by-10 grid
     and probabilities [0.3, 0.05, 0.05, 0.1, 0.2, 0.2]
  *  20000 calls with non-degenerate points in a 1-by-1 grid
     and probabilities [0.3, 0.05, 0.05, 0.1, 0.2, 0.2]
==> passed

Test 7b: Intermixed sequence of calls to insert(), isEmpty(), size(),
         contains(), range(), and nearest() with probabilities
         [p1, p2, p3, p4, p5, p6], respectively
  *  20000 calls with distinct points in a 100000-by-100000 grid
     and probabilities [0.3, 0.05, 0.05, 0.2, 0.2, 0.2]
  *  20000 calls with distinct points in a 10000-by-10000 grid
     and probabilities [0.3, 0.05, 0.05, 0.2, 0.2, 0.2]
  *  20000 calls with distinct points in a 1000-by-1000 grid
     and probabilities [0.3, 0.05, 0.05, 0.2, 0.2, 0.2]
  *  20000 calls with distinct points in a 100-by-100 grid
     and probabilities [0.3, 0.05, 0.05, 0.2, 0.2, 0.2]
  *  20000 calls with distinct points in a 10-by-10 grid
     and probabilities [0.3, 0.05, 0.05, 0.2, 0.2, 0.2]
  *  20000 calls with distinct points in a 1-by-1 grid
     and probabilities [0.3, 0.05, 0.05, 0.2, 0.2, 0.2]
==> passed

Test 7c: Intermixed sequence of calls to insert(), isEmpty(), size(),
         contains(), range(), and nearest() with probabilities
         [p1, p2, p3, p4, p5, p6], respectively
  *  20000 calls with general points in a 100000-by-100000 grid
     and probabilities [0.3, 0.05, 0.05, 0.2, 0.2, 0.2]
  *  20000 calls with general points in a 10000-by-10000 grid
     and probabilities [0.3, 0.05, 0.05, 0.2, 0.2, 0.2]
  *  20000 calls with general points in a 1000-by-1000 grid
     and probabilities [0.3, 0.05, 0.05, 0.2, 0.2, 0.2]
  *  20000 calls with general points in a 100-by-100 grid
     and probabilities [0.3, 0.05, 0.05, 0.2, 0.2, 0.2]
  *  20000 calls with general points in a 10-by-10 grid
     and probabilities [0.3, 0.05, 0.05, 0.2, 0.2, 0.2]
  *  20000 calls with general points in a 1-by-1 grid
     and probabilities [0.3, 0.05, 0.05, 0.2, 0.2, 0.2]
==> passed

Test 8: Intermixed sequence of calls to insert(), isEmpty(), size(),
        contains(), range(), and nearest() with probabilities
        [p1=0, p2, p3, p4, p5, p6], respectively
        (data structure with 0 points)
  *  1000 calls with no points in a 1000-by-1000 grid
     and probabilities [0.0, 0.5, 0.5, 0.0, 0.0, 0.0]
  *  1000 calls with no points in a 1000-by-1000 grid
     and probabilities [0.0, 0.2, 0.2, 0.6, 0.0, 0.0]
  *  1000 calls with no points in a 1000-by-1000 grid
     and probabilities [0.0, 0.2, 0.2, 0.0, 0.6, 0.0]
  *  1000 calls with no points in a 1000-by-1000 grid
     and probabilities [0.0, 0.2, 0.2, 0.0, 0.0, 0.6]
  *  1000 calls with no points in a 1000-by-1000 grid
     and probabilities [0.0, 0.2, 0.2, 0.2, 0.2, 0.2]
==> passed


Total: 19/19 tests passed!


================================================================

******************************************************************************
*  MEMORY
******************************************************************************

Computing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Computing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          160                160
=> passed        2          288                288
=> passed        5          672                672
=> passed       10         1312               1312
=> passed       25         3232               3232
=> passed      100        12832              12832
=> passed      400        51232              51232
=> passed      800       102432             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)
================================================================



******************************************************************************
*  TIMING
******************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1723535
=> passed   320000    1825936
=> passed   640000    1529519
=> passed  1280000    1240237
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     511422
=> passed   320000     495064
=> passed   640000     443046
=> passed  1280000     394364
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       3883
=> passed    20000       1852
=> passed    40000        852
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4679
=> passed    20000       2200
=> passed    40000        977
==> 3/3 tests passed

Total: 14/14 tests passed!

================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Inserting n points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000    1095958               1.0              33.2              31.7              21.6
=> passed   320000    1157534               1.0              33.8              32.3              22.0
=> passed   640000    1192431               1.0              36.1              34.6              23.5
=> passed  1280000     967391               1.0              39.2              37.7              25.6
==> 4/4 tests passed

Performing contains() queries after inserting n points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000     535882              18.5              17.5              18.0
=> passed    20000     552198              19.7              18.7              19.2
=> passed    40000     511458              21.8              20.8              21.3
=> passed    80000     506148              22.0              21.0              21.5
=> passed   160000     461066              23.2              22.2              22.7
=> passed   320000     418599              25.0              24.0              24.5
=> passed   640000     383542              25.7              24.7              25.2
=> passed  1280000     338117              27.2              26.2              26.7
==> 8/8 tests passed

Performing range() queries after inserting n points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     359354              50.4              50.4              79.2              14.7
=> passed    20000     333226              52.7              52.7              84.9              20.1
=> passed    40000     303241              64.9              64.9             102.4              17.4
=> passed    80000     284081              67.1              67.1             106.4              18.5
=> passed   160000     252715              70.0              70.0             115.0              25.9
=> passed   320000     206093              67.0              67.0             106.6              19.6
=> passed   640000     167507              72.0              72.0             115.3              24.1
=> passed  1280000     207095              78.7              78.7             123.1              17.5
==> 8/8 tests passed

Performing nearest() queries after inserting n points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> passed    10000   321286                 124.5                   41.5                   115.5             114.1
=> passed    20000   310587                 137.5                   45.8                   127.1             126.0
=> passed    40000   275061                 162.3                   54.1                   151.0             148.4
=> passed    80000   261347                 166.3                   55.4                   152.5             152.9
=> passed   160000   230265                 180.9                   60.3                   167.2             166.1
=> passed   320000   174280                 189.4                   63.1                   174.3             173.1
=> passed   640000   144107                 196.1                   65.4                   180.1             179.7
=> passed  1280000   120462                 220.3                   73.4                   202.7             200.4
==> 8/8 tests passed

Total: 28/28 tests passed!

================================================================
